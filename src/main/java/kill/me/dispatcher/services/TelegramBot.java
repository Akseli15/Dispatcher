package kill.me.dispatcher.services;

import com.itextpdf.layout.element.Cell;
import jakarta.annotation.PostConstruct;
import kill.me.dispatcher.config.BotConfig;
import kill.me.dispatcher.entities.Driver;
import kill.me.dispatcher.entities.Subtask;
import kill.me.dispatcher.entities.Task;
import kill.me.dispatcher.entities.statuses.SubtaskStatus;
import kill.me.dispatcher.services.core.BotService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import kill.me.dispatcher.entities.Comment;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final BotService botService;
    private final Map<Long, Long> currentTaskId = new HashMap<>();
    private final Map<Long, Long> currentSubtaskId = new HashMap<>();
    private final Map<Long, Long> lastMessageId = new HashMap<>();
    private final Map<Long, Boolean> awaitingMessage = new HashMap<>(); // Track if waiting for message input

    @Autowired
    public TelegramBot(BotConfig botConfig, BotService botService) {
        this.botConfig = botConfig;
        this.botService = botService;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        long chatId;
        String userName;

        if (update.hasCallbackQuery()) {
            chatId = update.getCallbackQuery().getMessage().getChatId();
            userName = update.getCallbackQuery().getFrom().getFirstName();
            String callbackData = update.getCallbackQuery().getData();
            Long messageId = update.getCallbackQuery().getMessage().getMessageId().longValue();
            lastMessageId.put(chatId, messageId);

            if (callbackData.equals("write_message")) {
                Long taskId = currentTaskId.getOrDefault(chatId, 0L);
                if (taskId == 0L) {
                    EditMessageText editMessage = new EditMessageText();
                    editMessage.setChatId(String.valueOf(chatId));
                    editMessage.setMessageId(messageId.intValue());
                    editMessage.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.");
                    editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                    try {
                        execute(editMessage);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                    return;
                }
                awaitingMessage.put(chatId, true); // Set flag to await message
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText("üí¨ " + userName + ", –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:");
                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                }
            } else {
                // Handle other callbacks (refresh_tasks, register, authorize, etc.) as in the original code
                // ... (omitted for brevity, keep existing logic)
                if (callbackData.equals("refresh_tasks")) {
                    try {
                        List<Task> tasks = botService.getTasksByDriverChatId(chatId);
                        StringBuilder taskList = new StringBuilder();
                        if (tasks.isEmpty()) {
                            taskList.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤");
                        }
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("üìã " + userName + ", –≤–æ—Ç –≤–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã:\n" + taskList);
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        execute(editMessage);
                    } catch (Exception e) {
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚ùå " + userName + ", –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤.");
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        try {
                            execute(editMessage);
                        } catch (TelegramApiException ex) {
                            throw new RuntimeException(ex);
                        }
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: " + e.getMessage());
                    }
                } else if (callbackData.equals("register")) {
                    boolean isUserInDatabase = checkUserInDatabase(chatId);
                    SendMessage message = new SendMessage();
                    message.setChatId(String.valueOf(chatId));
                    if (isUserInDatabase) {
                        message.setText("üöö " + userName + ", –≤—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ! \n\n" +
                                "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ: –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã, –æ–±—â–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createMainMenuKeyboard(chatId));
                    } else {
                        message.setText("üì± " + userName + ", –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n" +
                                "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!");
                        message.setReplyMarkup(createPhoneRequestKeyboard());
                    }
                    try {
                        execute(message);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                } else if (callbackData.equals("authorize")) {
                    boolean isUserInDatabaseAuth = checkUserInDatabase(chatId);
                    SendMessage message = new SendMessage();
                    message.setChatId(String.valueOf(chatId));
                    if (isUserInDatabaseAuth) {
                        message.setText("‚úÖ " + userName + ", –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! \n\n" +
                                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ä—à—Ä—É—Ç–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏, —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º–∏ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createMainMenuKeyboard(chatId));
                    } else {
                        message.setText("‚ùå " + userName + ", –≤–∞—à chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. \n" +
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!");
                        message.setReplyMarkup(createPhoneRequestKeyboard());
                    }
                    try {
                        execute(message);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                } else if (callbackData.equals("download_routelist")) {
                    try {
                        Long taskId = currentTaskId.getOrDefault(chatId, 0L);
                        if (taskId == 0L) {
                            EditMessageText editMessage = new EditMessageText();
                            editMessage.setChatId(String.valueOf(chatId));
                            editMessage.setMessageId(messageId.intValue());
                            editMessage.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.");
                            editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                            execute(editMessage);
                            return;
                        }
                        Task task = botService.getTaskById(taskId);
                        if (task == null) {
                            EditMessageText editMessage = new EditMessageText();
                            editMessage.setChatId(String.valueOf(chatId));
                            editMessage.setMessageId(messageId.intValue());
                            editMessage.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                            editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                            execute(editMessage);
                            return;
                        }
                        List<Subtask> subtasks = botService.getAllSubtasksById(taskId);
                        System.out.println("Task ID: " + taskId + ", Task Number: " + task.getTaskNumber() + ", Subtasks: " + (subtasks != null ? subtasks.size() : "null"));
                        byte[] pdfBytes = generateRouteListPdf(task, subtasks);
                        SendDocument sendDocument = new SendDocument();
                        sendDocument.setChatId(String.valueOf(chatId));
                        sendDocument.setDocument(new InputFile(new ByteArrayInputStream(pdfBytes), "–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π_–ª–∏—Å—Ç_‚Ññ" + task.getTaskNumber() + ".pdf"));
                        sendDocument.setCaption("#–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_" + task.getTaskNumber());
                        execute(sendDocument);
                    } catch (Exception e) {
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚ùå " + userName + ", –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞.");
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: " + e.getMessage());
                    }
                } else if (callbackData.startsWith("task_")) {
                    try {
                        String taskNumber = callbackData.replace("task_", "");
                        List<Task> tasks = botService.getTasksByDriverChatId(chatId);
                        Task selectedTask = tasks.stream()
                                .filter(task -> task.getTaskNumber().equals(taskNumber))
                                .findFirst()
                                .orElse(null);
                        if (selectedTask != null) {
                            currentTaskId.put(chatId, selectedTask.getId());
                            List<Subtask> subtasks = botService.getAllSubtasksById(selectedTask.getId());
                            StringBuilder routePoints = new StringBuilder();
                            if (subtasks.isEmpty()) {
                                routePoints.append("–ü—É–Ω–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã");
                            } else {
                                for (int i = 0; i < subtasks.size(); i++) {
                                    Subtask subtask = subtasks.get(i);
                                    routePoints.append(i + 1).append(". ")
                                            .append("–ê–¥—Ä–µ—Å: ").append(subtask.getClient().getAddress()).append(", ")
                                            .append("–Æ—Ä. –ª–∏—Ü–æ: ").append(subtask.getClient().getFullName()).append(", ")
                                            .append("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").append(subtask.getClient().getPhoneNumber()).append(".\n")
                                            .append("–°—Ç–∞—Ç—É—Å: ").append(subtask.getStatus().getDescription()).append("\n");
                                }
                            }
                            EditMessageText editMessage = new EditMessageText();
                            editMessage.setChatId(String.valueOf(chatId));
                            editMessage.setMessageId(messageId.intValue());
                            editMessage.setText("üìã #–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_" + taskNumber + "\n\n" +
                                    "–ü—É–Ω–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞: \n" + routePoints + "\n" +
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:");
                            editMessage.setReplyMarkup(createTaskDetailsKeyboard(selectedTask.getId()));
                            execute(editMessage);
                        } else {
                            EditMessageText editMessage = new EditMessageText();
                            editMessage.setChatId(String.valueOf(chatId));
                            editMessage.setMessageId(messageId.intValue());
                            editMessage.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç ‚Ññ" + taskNumber + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                            editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                            execute(editMessage);
                        }
                    } catch (Exception e) {
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚ùå " + userName + ", –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞.");
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        try {
                            execute(editMessage);
                        } catch (TelegramApiException ex) {
                            throw new RuntimeException(ex);
                        }
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: " + e.getMessage());
                    }
                } else if (callbackData.startsWith("subtask_")) {
                    try {
                        Long subtaskId = Long.parseLong(callbackData.replace("subtask_", ""));
                        currentSubtaskId.put(chatId, subtaskId);
                        Subtask selectedSubtask = botService.getAllSubtasksById(currentTaskId.getOrDefault(chatId, 0L))
                                .stream()
                                .filter(subtask -> subtask.getId().equals(subtaskId))
                                .findFirst()
                                .orElse(null);
                        if (selectedSubtask != null) {
                            EditMessageText editMessage = new EditMessageText();
                            editMessage.setChatId(String.valueOf(chatId));
                            editMessage.setMessageId(messageId.intValue());
                            editMessage.setText("üìç –í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç: " + selectedSubtask.getClient().getAddress() + "\n\n" +
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:");
                            editMessage.setReplyMarkup(createStatusKeyboard(subtaskId, currentTaskId.getOrDefault(chatId, 0L)));
                            execute(editMessage);
                        } else {
                            EditMessageText editMessage = new EditMessageText();
                            editMessage.setChatId(String.valueOf(chatId));
                            editMessage.setMessageId(messageId.intValue());
                            editMessage.setText("‚ùå " + userName + ", –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                            editMessage.setReplyMarkup(createTaskDetailsKeyboard(currentTaskId.getOrDefault(chatId, 0L)));
                            execute(editMessage);
                        }
                    } catch (Exception e) {
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚ùå " + userName + ", –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞.");
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        try {
                            execute(editMessage);
                        } catch (TelegramApiException ex) {
                            throw new RuntimeException(ex);
                        }
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∑–∞–¥–∞—á–∏: " + e.getMessage());
                    }
                } else if (callbackData.startsWith("status_")) {
                    try {
                        String[] parts = callbackData.replace("status_", "").split("_");
                        Long subtaskId = Long.parseLong(parts[0]);
                        SubtaskStatus newStatus = SubtaskStatus.valueOf(parts[1]);
                        Long taskId = currentTaskId.getOrDefault(chatId, 0L);
                        Subtask updatedSubtask = botService.updateStatus(subtaskId, newStatus);
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚úÖ " + userName + ", —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: " + newStatus.getDescription());
                        editMessage.setReplyMarkup(createTaskDetailsKeyboard(taskId));
                        execute(editMessage);
                    } catch (Exception e) {
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚ùå " + userName + ", –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.");
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        try {
                            execute(editMessage);
                        } catch (TelegramApiException ex) {
                            throw new RuntimeException(ex);
                        }
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage());
                    }
                } else if (callbackData.startsWith("back_to_task_")) {
                    try {
                        Long taskId = Long.parseLong(callbackData.replace("back_to_task_", ""));
                        List<Subtask> subtasks = botService.getAllSubtasksById(taskId);
                        StringBuilder routePoints = new StringBuilder();
                        if (subtasks.isEmpty()) {
                            routePoints.append("–ü—É–Ω–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã");
                        } else {
                            for (int i = 0; i < subtasks.size(); i++) {
                                Subtask subtask = subtasks.get(i);
                                routePoints.append(i + 1).append(". ")
                                        .append("–ê–¥—Ä–µ—Å: ").append(subtask.getClient().getAddress()).append(", ")
                                        .append("–Æ—Ä. –ª–∏—Ü–æ: ").append(subtask.getClient().getFullName()).append(", ")
                                        .append("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").append(subtask.getClient().getPhoneNumber()).append(".\n")
                                        .append("–°—Ç–∞—Ç—É—Å: ").append(subtask.getStatus().getDescription()).append("\n");
                            }
                        }
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("üìã #–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_\n\n" +
                                "–ü—É–Ω–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞: \n" + routePoints + "\n" +
                                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:");
                        editMessage.setReplyMarkup(createTaskDetailsKeyboard(taskId));
                        execute(editMessage);
                    } catch (Exception e) {
                        EditMessageText editMessage = new EditMessageText();
                        editMessage.setChatId(String.valueOf(chatId));
                        editMessage.setMessageId(messageId.intValue());
                        editMessage.setText("‚ùå " + userName + ", –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—É–Ω–∫—Ç–∞–º –º–∞—Ä—à—Ä—É—Ç–∞.");
                        editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                        try {
                            execute(editMessage);
                        } catch (TelegramApiException ex) {
                            throw new RuntimeException(ex);
                        }
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—É–Ω–∫—Ç–∞–º –º–∞—Ä—à—Ä—É—Ç–∞: " + e.getMessage());
                    }
                } else if (callbackData.equals("back_to_main")) {
                    EditMessageText editMessage = new EditMessageText();
                    editMessage.setChatId(String.valueOf(chatId));
                    editMessage.setMessageId(messageId.intValue());
                    editMessage.setText("üìã " + userName + ", –≤–æ—Ç –≤–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã:");
                    editMessage.setReplyMarkup(createMainMenuKeyboard(chatId));
                    try {
                        execute(editMessage);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                }
            }
        } else if (update.hasMessage()) {
            chatId = update.getMessage().getChatId();
            userName = update.getMessage().getFrom().getFirstName();
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));

            if (awaitingMessage.getOrDefault(chatId, false)) {
                Long taskId = currentTaskId.getOrDefault(chatId, 0L);
                if (taskId == 0L) {
                    message.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.");
                    message.setReplyMarkup(createMainMenuKeyboard(chatId));
                    awaitingMessage.remove(chatId);
                    try {
                        execute(message);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                    return;
                }

                Task task = botService.getTaskById(taskId);
                if (task == null) {
                    message.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    message.setReplyMarkup(createMainMenuKeyboard(chatId));
                    awaitingMessage.remove(chatId);
                    try {
                        execute(message);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                    return;
                }

                Comment comment = new Comment();
                comment.setAuthorFullName(userName);

                MultipartFile photo = null;
                if (update.getMessage().hasPhoto()) {
                    try {
                        photo = downloadPhoto(update);
                        comment.setText(update.getMessage().getCaption() != null ? update.getMessage().getCaption() : "");
                    } catch (Exception e) {
                        message.setText("‚ùå " + userName + ", –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ.");
                        message.setReplyMarkup(createMainMenuKeyboard(chatId));
                        awaitingMessage.remove(chatId);
                        try {
                            execute(message);
                        } catch (TelegramApiException ex) {
                            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + ex.getMessage());
                        }
                        return;
                    }
                } else if (update.getMessage().hasText()) {
                    comment.setText(update.getMessage().getText());
                } else {
                    message.setText("‚ùå " + userName + ", –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.");
                    try {
                        execute(message);
                    } catch (TelegramApiException e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    }
                    return;
                }

                try {
                    botService.createComment(comment, photo, taskId);
                    message.setText("‚úÖ " + userName + ", —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.");
                    message.setReplyMarkup(createMainMenuKeyboard(chatId));
                } catch (Exception e) {
                    message.setText("‚ùå " + userName + ", –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                    message.setReplyMarkup(createMainMenuKeyboard(chatId));
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: " + e.getMessage());
                }
                awaitingMessage.remove(chatId);
                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                }
            } else if (update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();

                switch (messageText) {
                    case "/start":
                        message.setText("üöõ –ü—Ä–∏–≤–µ—Ç, " + userName + "! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π! \n\n" +
                                "üìã –ü–æ–ª—É—á–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã, \n" +
                                "üí¨ –°–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º–∏, \n" +
                                "üì§ –í—ã–≥—Ä—É–∂–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º, \n" +
                                "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö. \n\n" +
                                "–ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createStartKeyboard());
                        break;
                    case "/routelist":
                        message.setText("üìã " + userName + ", –≤–æ—Ç –≤–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã:");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createMainMenuKeyboard(chatId));
                        break;
                    case "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
                        Long taskId = currentTaskId.getOrDefault(chatId, 0L);
                        if (taskId == 0L) {
                            message.setText("‚ùå " + userName + ", –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.");
                            message.setReplyMarkup(createMainMenuKeyboard(chatId));
                        } else {
                            awaitingMessage.put(chatId, true);
                            message.setText("üí¨ " + userName + ", –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:");
                        }
                        break;
                    case "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                        message.setText("üìã " + userName + ", –≤–æ—Ç –≤–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã:");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createMainMenuKeyboard(chatId));
                        break;
                    default:
                        message.setText("‚ùì " + userName + ", –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. \n" +
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createStartKeyboard());
                }
                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                }
            } else if (update.getMessage().hasContact()) {
                String phoneNumber = update.getMessage().getContact().getPhoneNumber().replace("+", "");
                System.out.println(phoneNumber);
                try {
                    Driver driver = botService.getDriverByPhoneNumber(phoneNumber);
                    if (driver != null) {
                        botService.updateChatId(driver, String.valueOf(chatId));
                        message.setText("üéâ " + userName + ", —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! \n\n" +
                                "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Ä—à—Ä—É—Ç–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö!");
                        message.setReplyMarkup(new ReplyKeyboardRemove(true));
                        message.setReplyMarkup(createMainMenuKeyboard(chatId));
                        execute(message);
                    } else {
                        message.setText("‚ö†Ô∏è " + userName + ", –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. \n" +
                                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.");
                        message.setReplyMarkup(createStartKeyboard());
                        execute(message);
                    }
                } catch (Exception e) {
                    message.setText("‚ùå " + userName + ", –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. \n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
                    message.setReplyMarkup(createStartKeyboard());
                    try {
                        execute(message);
                    } catch (TelegramApiException ex) {
                        throw new RuntimeException(ex);
                    }
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
                }
            }
        }
    }

    private MultipartFile downloadPhoto(Update update) throws Exception {
        if (!update.getMessage().hasPhoto()) {
            return null;
        }
        // Get the largest photo size
        var photos = update.getMessage().getPhoto();
        var photo = photos.get(photos.size() - 1); // Largest size
        String fileId = photo.getFileId();

        // Create and configure GetFile request
        GetFile getFile = new GetFile();
        getFile.setFileId(fileId);

        org.telegram.telegrambots.meta.api.objects.File file;
        try {
            file = execute(getFile); // Call execute with GetFile object
        } catch (TelegramApiException e) {
            throw new Exception("Failed to retrieve file metadata from Telegram: " + e.getMessage(), e);
        }

        String fileUrl = String.format("https://api.telegram.org/file/bot%s/%s", getBotToken(), file.getFilePath());

        URL url = new URL(fileUrl);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (InputStream is = url.openStream()) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = is.read(buffer)) != -1) {
                baos.write(buffer, 0, bytesRead);
            }
        } catch (Exception e) {
            throw new Exception("Failed to download photo from Telegram: " + e.getMessage(), e);
        }
        byte[] fileBytes = baos.toByteArray();

        String originalFileName = UUID.randomUUID().toString() + ".jpg";
        return new MultipartFile() {
            @Override
            public String getName() {
                return "photo";
            }

            @Override
            public String getOriginalFilename() {
                return originalFileName;
            }

            @Override
            public String getContentType() {
                return "image/jpeg";
            }

            @Override
            public boolean isEmpty() {
                return fileBytes.length == 0;
            }

            @Override
            public long getSize() {
                return fileBytes.length;
            }

            @Override
            public byte[] getBytes() {
                return fileBytes;
            }

            @Override
            public InputStream getInputStream() {
                return new ByteArrayInputStream(fileBytes);
            }

            @Override
            public void transferTo(java.io.File dest) throws IOException {
                Files.write(dest.toPath(), fileBytes);
            }
        };
    }

    private InlineKeyboardMarkup createStartKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(InlineKeyboardButton.builder()
                .text("\uD83D\uDCDD –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \uD83D\uDCDD")
                .callbackData("register")
                .build());
        row.add(InlineKeyboardButton.builder()
                .text("\uD83D\uDD11 –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è \uD83D\uDD11")
                .callbackData("authorize")
                .build());
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createPhoneRequestKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add(KeyboardButton.builder()
                .text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                .requestContact(true)
                .build());
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup createMainMenuKeyboard(long chatId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        try {
            List<Task> tasks = botService.getTasksByDriverChatId(chatId);
            if (tasks.isEmpty()) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                row.add(InlineKeyboardButton.builder()
                        .text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤")
                        .callbackData("no_tasks")
                        .build());
                keyboard.add(row);
            } else {
                for (Task task : tasks) {
                    List<InlineKeyboardButton> row = new ArrayList<>();
                    row.add(InlineKeyboardButton.builder()
                            .text("–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç ‚Ññ " + task.getTaskNumber())
                            .callbackData("task_" + task.getTaskNumber())
                            .build());
                    keyboard.add(row);
                }
            }
        } catch (Exception e) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤")
                    .callbackData("error_tasks")
                    .build());
            keyboard.add(row);
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + e.getMessage());
        }

        List<InlineKeyboardButton> refreshRow = new ArrayList<>();
        refreshRow.add(InlineKeyboardButton.builder()
                .text("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤")
                .callbackData("refresh_tasks")
                .build());
        keyboard.add(refreshRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup createTaskDetailsKeyboard(Long taskId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        try {
            List<Subtask> subtasks = botService.getAllSubtasksById(taskId);
            if (subtasks.isEmpty()) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                row.add(InlineKeyboardButton.builder()
                        .text("–ù–µ—Ç –ø—É–Ω–∫—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞")
                        .callbackData("no_subtasks")
                        .build());
                keyboard.add(row);
            } else {
                for (int i = 0; i < subtasks.size(); i++) {
                    Subtask subtask = subtasks.get(i);
                    List<InlineKeyboardButton> row = new ArrayList<>();
                    row.add(InlineKeyboardButton.builder()
                            .text("–ü—É–Ω–∫—Ç " + (i + 1) + ": " + subtask.getClient().getAddress())
                            .callbackData("subtask_" + subtask.getId())
                            .build());
                    keyboard.add(row);
                }
            }
        } catch (Exception e) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—É–Ω–∫—Ç–æ–≤")
                    .callbackData("error_subtasks")
                    .build());
            keyboard.add(row);
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á: " + e.getMessage());
        }

        List<InlineKeyboardButton> additionalRow = new ArrayList<>();
        additionalRow.add(InlineKeyboardButton.builder()
                .text("–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .callbackData("write_message")
                .build());
        additionalRow.add(InlineKeyboardButton.builder()
                .text("–°–∫–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç")
                .callbackData("download_routelist")
                .build());
        additionalRow.add(InlineKeyboardButton.builder()
                .text("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                .callbackData("back_to_main")
                .build());
        keyboard.add(additionalRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup createStatusKeyboard(Long subtaskId, Long taskId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (SubtaskStatus status : SubtaskStatus.values()) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(status.getDescription())
                    .callbackData("status_" + subtaskId + "_" + status.name())
                    .build());
            keyboard.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(InlineKeyboardButton.builder()
                .text("–ù–∞–∑–∞–¥ –∫ –ø—É–Ω–∫—Ç–∞–º –º–∞—Ä—à—Ä—É—Ç–∞")
                .callbackData("back_to_task_" + taskId)
                .build());
        keyboard.add(backRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private boolean checkUserInDatabase(long chatId) {
        Driver driver = botService.getDriverByChatId(String.valueOf(chatId));
        return driver != null;
    }

    public void sendTaskNotification(String chatId, String taskNumber) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç ‚Ññ #–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_" + taskNumber + "!\n" +
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /routelist");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: " + e.getMessage());
        }
    }

    public void sendTaskCanceledNotification(String chatId, String taskNumber) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìã –í–∞—à #–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_" + taskNumber + " –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!\n" +
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /routelist");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: " + e.getMessage());
        }
    }

    public void sendTaskClosedNotification(String chatId, String taskNumber) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìã –í–∞—à #–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_" + taskNumber + " –±—ã–ª –∑–∞–∫—Ä—ã—Ç!\n" +
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /routelist");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: " + e.getMessage());
        }
    }

    public void sendTelegramNotification(String telegramId, String taskNumber, String commentText, String photoUrl) throws TelegramApiException {
        String caption = String.format(
                "–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–º—É –ª–∏—Å—Ç—É ‚Ññ%s:\n%s\n\n#%s",
                taskNumber,
                commentText,
                "–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π–õ–∏—Å—Ç_" + taskNumber
        );

        if (photoUrl != null) {
            String basePath = "E:/–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç/4 –∫—É—Ä—Å/8 —Å–µ–º–µ—Å—Ç—Ä/–î–∏–ø–ª–æ–º/dispatcher";
            File photoFile = new File(basePath + photoUrl);

            if (photoFile.exists()) {
                SendPhoto sendPhoto = new SendPhoto();
                sendPhoto.setChatId(telegramId);
                sendPhoto.setPhoto(new InputFile(photoFile));
                sendPhoto.setCaption(caption);
                execute(sendPhoto);
                return;
            } else {
                System.err.println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + photoFile.getAbsolutePath());
            }
        }

        SendMessage message = new SendMessage();
        message.setChatId(telegramId);
        message.setText(caption);
        execute(message);
    }

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd MMMM yyyy");
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    private byte[] generateRouteListPdf(Task task, List<Subtask> subtasks) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(baos);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        PdfFont font;
        try {
            font = PdfFontFactory.createFont("c:/windows/fonts/arial.ttf", PdfEncodings.IDENTITY_H);
            document.setFont(font);
        } catch (Exception e) {
            System.err.println("Failed to load font: " + e.getMessage() + ". Using default font.");
            font = PdfFontFactory.createFont(PdfEncodings.IDENTITY_H);
            document.setFont(font);
        }

        String taskNumber = task.getTaskNumber() != null ? task.getTaskNumber() : "–ù–µ —É–∫–∞–∑–∞–Ω";
        document.add(new Paragraph(new Text("–ú–ê–†–®–†–£–¢–ù–´–ô –õ–ò–°–¢ ‚Ññ " + taskNumber))
                .setBold().setFontSize(13).setUnderline().setTextAlignment(TextAlignment.CENTER));
        document.add(new Paragraph("—Ä–∞–±–æ—Ç–Ω–∏–∫–∞ \"–û–û–û –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\"")
                .setTextAlignment(TextAlignment.CENTER));
        String taskDate = task.getCreatedAt() != null ? task.getCreatedAt().format(DATE_FORMATTER) : "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
        document.add(new Paragraph("–Ω–∞ \"" + taskDate + "\"")
                .setTextAlignment(TextAlignment.CENTER).setMarginBottom(20));

        String driverName = task.getDriver() != null && task.getDriver().getName() != null ? task.getDriver().getName() : "–ù–µ —É–∫–∞–∑–∞–Ω";
        document.add(new Paragraph("–†–∞–±–æ—Ç–Ω–∏–∫: " + driverName));
        document.add(new Paragraph("–î–æ–ª–∂–Ω–æ—Å—Ç—å: –í–æ–¥–∏—Ç–µ–ª—å (–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –æ—Ç–¥–µ–ª)").setMarginBottom(15));

        float[] columnWidths = {30, 100, 100, 80, 80, 50, 50};
        Table table = new Table(UnitValue.createPointArray(columnWidths));
        table.addHeaderCell("‚Ññ");
        table.addHeaderCell("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
        table.addHeaderCell("–ê–¥—Ä–µ—Å");
        table.addHeaderCell("–¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏");
        table.addHeaderCell("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ");
        table.addHeaderCell("–í—Ä–µ–º—è");
        table.addHeaderCell("–ü–æ–¥–ø–∏—Å—å");

        if (subtasks == null || subtasks.isEmpty()) {
            Cell noSubtasksCell = new Cell(1, 7);
            noSubtasksCell.add(new Paragraph("–ù–µ—Ç –ø—É–Ω–∫—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞").setTextAlignment(TextAlignment.CENTER));
            table.addCell(noSubtasksCell);
        } else {
            for (int i = 0; i < subtasks.size(); i++) {
                Subtask subtask = subtasks.get(i);
                table.addCell(String.valueOf(i + 1));
                table.addCell(subtask.getClient() != null && subtask.getClient().getFullName() != null ? subtask.getClient().getFullName() : "–ù–µ —É–∫–∞–∑–∞–Ω");
                table.addCell(subtask.getClient() != null && subtask.getClient().getAddress() != null ? subtask.getClient().getAddress() : "–ù–µ —É–∫–∞–∑–∞–Ω");
                table.addCell("–î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–∞");
                table.addCell(task.getVehicle() != null && task.getVehicle().getRegistrationNumber() != null ? task.getVehicle().getRegistrationNumber() : "–ù–µ —É–∫–∞–∑–∞–Ω");
                table.addCell(subtask.getUnloadingTime() != null ? subtask.getUnloadingTime().format(TIME_FORMATTER) : "");
                table.addCell("");
            }
        }
        document.add(table);

        document.add(new Paragraph("–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω \"" + java.time.LocalDate.now().format(DATE_FORMATTER) +
                "\" –≤ " + java.time.LocalTime.now().format(TIME_FORMATTER))
                .setTextAlignment(TextAlignment.RIGHT).setMarginTop(30));

        document.close();
        return baos.toByteArray();
    }

    @PostConstruct
    public void initCommands() {
        List<BotCommand> commandList = new ArrayList<>();
        commandList.add(new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"));
        commandList.add(new BotCommand("/routelist", "–í–µ—Ä–Ω—ë—Ç –í–∞–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤"));

        try {
            execute(new SetMyCommands(commandList, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}